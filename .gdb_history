c
thread 2
bt
frame 5
p TIMER_QUEUE.try_lock_exclusive()
p TIMER_QUEUE.try_lock_exclusive()
p TIMER_QUEUE.try_lock_write()
q
c
n
n
thread 2
bt
bt
frame 9
si
si
si
si
p rust_0bsd_riscv_kernel::std_macros::OUTPUT_LOCK.is_locked()
p rust_0bsd_riscv_kernel::std_macros::OUTPUT_LOCK
p rust_0bsd_riscv_kernel::std_macros::OUTPUT_LOCK.raw.internal.locked.value
p rust_0bsd_riscv_kernel::std_macros::OUTPUT_LOCK.raw.internal.locked
p rust_0bsd_riscv_kernel::std_macros::OUTPUT_LOCK.raw.internal.locked.v
p rust_0bsd_riscv_kernel::std_macros::OUTPUT_LOCK.raw.internal.locked.v.value
p rust_0bsd_riscv_kernel::std_macros::OUTPUT_LOCK.raw.internal.locked.v.value
q
c
bt
c
bt
c
c
q
c
bt
bt
c
c
x/10i $pc
x/10i $pc
si
q
q
c
c
bt
frame 8
p info.message()
p info.message)
p info.message()
p info.message
p info.message.Some 
p info.message.1
p info.message..0
p info.message.0
p info.message.0
q
q
c
q
c
bt
p rust_0bsd_riscv_kernel::std_macros::OUTPUT_LOCK
p rust_0bsd_riscv_kernel::std_macros::OUTPUT_LOCK.raw
p rust_0bsd_riscv_kernel::std_macros::OUTPUT_LOCK.data
p rust_0bsd_riscv_kernel::std_macros::OUTPUT_LOCK.data.value
p rust_0bsd_riscv_kernel::std_macros::OUTPUT_LOCK.raw 
p rust_0bsd_riscv_kernel::std_macros::OUTPUT_LOCK.raw.internal.locked
p rust_0bsd_riscv_kernel::std_macros::OUTPUT_LOCK.raw.internal.locked.v.value
thread 2
thread 3
bt
q
q
break rust_0bsd_riscv_kernel::context_switch::context_switch 
c
prhids
phids
print_hartids 
c
c
c
q
c
print_hartids 
q
q
c
q
break rust_0bsd_riscv_kernel::context_switch::schedule_and_switch 
c
print_hartids 
c
c
c
print_hartids 
c
print_hartids 
c
c
print_hartids 
c
print_hartids 
c
print_hartids 
c
q
break s_trap_vector 
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
bt
frame 6
thread 2
bt
thread 3
bt
q
bt
frame 6
p info.message()
p info.message
p info.message.Some 
p info.message 
p *info.message 
p info.message.0
p *info.message.0
p *info.message.0
p *info.message.0.into()
p *info.message.0.into::<String>()
p String::from(*info.message.0)
p alloc::String::from(*info.message.0)
p alloc::String::from(*info.message.0)
p From::from(*info.message.0)
p alloc::string::String::from(
p alloc::string::String::from()
p alloc::fmt::format(*info.message
p alloc::fmt::format(*info.message.0)
p scause
p $scause
p $stval
c
c
c
c
c
c
c
c
c
c
break trap_handler 
c
n
n
nq
y
q
